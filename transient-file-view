#!/bin/bash

NEXT_OPTION_LOOKAHEAD='(?=,exclude=.|,snapshot|,overlay|,toleratepartialtransfer|$)'
ORIGINAL_PATH="$PATH"

function silence_stderr {
	"$@" 2>/dev/null
	return $?
}

FINAL_FUSER_UMOUNT_DIRS=()
FINAL_UMOUNT_DIRS=()
FINAL_BIND_UMOUNTS=()
function clean_final {
	exitCode=$?
	set_oldroot_path

	cd /
	local dir bind_mount
	for dir in "${FINAL_FUSER_UMOUNT_DIRS[@]}"; do
		fusermount -u "$dir" 2>/dev/null
		if [[ "$(findmnt --noheadings -o FSTYPE "$dir")" == "fuse.fuse-overlayfs" ]]; then
			fusermount -z -u "$dir" 2>/dev/null
		fi
	done
	for bind_mount in "${FINAL_BIND_UMOUNTS[@]}"; do
		if ! umount "$bind_mount" 2>/dev/null && ! umount -l "$bind_mount" 2>/dev/null &&
			[[ "$(findmnt --noheadings -o FSTYPE "$bind_mount")" == "tmpfs" ]]; then
			echo "Error: Failed to umount \"$bind_mount\", aborting." >&2
			exit 1
		fi
	done
	for dir in "${FINAL_UMOUNT_DIRS[@]}"; do
		if ! findmnt "$dir" > /dev/null; then
			continue
		fi
		if ! umount "$dir" 2>/dev/null && ! umount -l "$dir" 2>/dev/null && findmnt "$dir" 2>/dev/null; then
			echo "Error: Failed to umount \"$dir\", aborting." >&2
			exit 1
		fi
	done
	rm --one-file-system -rf "$MAIN_TMP_DIR"

	exit "$exitCode"
}

function assert_valid_directory {
	# Horrible things will happen if we try to work on /tmp (as our tmp directories/ mounts are in there)
	if [ "$1" == "/tmp" ]; then
		echo "Error: Cannot work on /tmp (as the tool makes internal use ot it)." >&2
		return 1
	fi
	# We can't do anything useful with /dev anyway (and fuse-overlayfs needs access to /dev/fuse)
	if [[ "$1" =~ ^\/dev(\/|$) ]]; then
		echo "Error: Cannot work on /dev." >&2
		return 1
	fi
	# Not tested, but this is surely going to cause trouble.
	if [ "$1" == "/" ]; then
		echo "Error: Cannot work on /." >&2
		return 1
	fi
}

function assert_valid_directory_options {
	if [ ! "$(echo "$1" | grep -oP "^(,exclude=.*?$NEXT_OPTION_LOOKAHEAD|,overlay|,snapshot|,toleratepartialtransfer)*")" == "$1" ]; then
		echo "Error: Invalid directory format, please refer to \"$(basename "$0") --help\"." >&2
		return 1
	fi
}

function assert_valid_file {
	# We already know that the file exists
	if [ ! -r "$1" ]; then
		echo "Error: Can't read file \"$1\"." >&2
		return 1
	fi
}

function usage {
	echo "Transient File View 0.7.0-PRE"
	echo "Usage: $(basename "$0") [--help] [--verbose|--debug] file [file]* [-- command [ARG]...]"
	echo
	echo "Create transient views of files or directories in a user namespace. This creates a new mount namespace with"
	echo "transient versions of the given files or directories."
	echo "For directories these views are either temporary snapshots (\"snapshot\") created by tar-ing the folder content"
	echo "into a tmpfs mount, or overlays (\"overlay\") created by fuse-overlayfs."
	echo
	echo -e "\t--help			Show this help"
	echo -e "\t--verbose		Print verbose debugging info"
	echo -e "\t--debug			Show all debug information (implies --verbose)"
	echo -e "\tfile			file or directory to create a view of"
	echo -e "\tcommand			if command is omitted an interactive shell will be launched"
	echo
	echo "Files or directories can be given using the following syntax:"
	echo -e "\tpath/of/the/file[,snapshot][,overlay][,toleratepartialtransfer][,exclude=PATTERN]*"
	echo
	echo -e "for directories only:"
	echo -e "\t\"snapshot\" to create a tmporary snapshot of the directory in a new tmpfs (mutually exclusive with \"overlay\")."
	echo -e "\t\"overlay\" to use fuse-overlayfs for the directory view (mutually exclusive with \"snapshot\")."
	echo -e "directory \"snapshot\" mode only:"
	echo -e "\t\"exclude\" PATTERN is passed to \"tar\" to determine which files not to sync into the snapshot."
	echo -e "\t\t(tar --exclude), can be given multiple times."
	echo -e "\t\"toleratepartialtransfer\" if set, don't fail on partial transfers (tar --ignore-failed-read)."
}

function mount_oldroot {
	local MOUNT_PATH MOUNT_OUT MOUNT_STATUS
	MOUNT_PATH="$MAIN_TMP_DIR/oldroot"
	mkdir -p "$MOUNT_PATH"
	FINAL_UMOUNT_DIRS+=("$MOUNT_PATH")
	MOUNT_OUT="$(LC_ALL=C mount --rbind -o ro / "$MOUNT_PATH" 2>&1)"
	MOUNT_STATUS=$?
	if [ $MOUNT_STATUS -eq 32 ] && [[ "$MOUNT_OUT" =~ was\ mounted,\ but\ any\ subsequent\ operation\ failed ]]; then
		if [ "$VERBOSE" -gt 0 ]; then
			echo "Warning: mount --rbind partially failed: $MOUNT_OUT" >&2
		fi
	elif [ $MOUNT_STATUS -gt 0 ]; then
		echo "Error: mount --rbind failed: $MOUNT_OUT" >&2
		return 255
	fi
	set_oldroot_path
}

# Set PATH so that it takes binaries from the original / preferably.
function set_oldroot_path {
	PATH="$MAIN_TMP_DIR/oldroot${PATH//:/:$MAIN_TMP_DIR/oldroot}:$PATH"
}

function handle_directory {
	local DIRECTORY="$1"
	local DIRECTORY_OPTIONS="$2"

	if ! assert_valid_directory "$DIRECTORY" ||
		! assert_valid_directory_options "$DIRECTORY_OPTIONS"; then
		return 1
	fi

	if [ "$DEBUG" -gt 0 ]; then
		echo "Acting on folder \"$DIRECTORY\"." >&2
	fi

	local OVERLAY=0
	if [[ "$DIRECTORY_OPTIONS" =~ ,overlay(,|$) ]]; then
		if [[ "$DIRECTORY_OPTIONS" =~ ,snapshot(,|$) ]]; then
			echo "Options \"snapshot\" and \"overlay\" are mutually exclusive." >&2
			return 1
		fi
		OVERLAY=1
	fi

	local TAR_ARGS=("--one-file-system")
	local OVERLAYFS_ARGS=("-o" "squash_to_gid=0" "-o" "squash_to_uid=0")
	local exclude excludes
	while read -r exclude; do
		excludes+=("$exclude")
	done < <(
		echo "$DIRECTORY_OPTIONS" | \
			grep -oP "(?<=,exclude=).*?$NEXT_OPTION_LOOKAHEAD")

	if [ "$OVERLAY" -eq 0 ]; then
		if ! MOUNT_OUT="$(mount -n -t tmpfs tmpfs "$DIRECTORY" 2>&1)"; then
			echo "Error: Mounting tmpfs to \"$DIRECTORY\": $MOUNT_OUT" >&2
			return 255
		fi
		FINAL_BIND_UMOUNTS+=("$DIRECTORY")

		if [[ "$DIRECTORY_OPTIONS" =~ ,toleratepartialtransfer(,|$) ]]; then
			TAR_ARGS+=("--ignore-failed-read")
		fi

		for exclude in "${excludes[@]}"; do
			TAR_ARGS+=("--exclude" "$exclude")
		done

		if [ "$DEBUG" -gt 0 ]; then
			TAR_ARGS+=("--verbose")
			echo "Running: tar ${TAR_ARGS[*]}" >&2
		fi

		local TAR_WRAP=""
		if [ "$VERBOSE" -eq 0 ]; then
			TAR_WRAP="silence_stderr"
		fi
		set -o pipefail
		if ! (cd "$MAIN_TMP_DIR/oldroot/$DIRECTORY"; $TAR_WRAP tar c "${TAR_ARGS[@]}" . ) | (cd "$DIRECTORY/" ; $TAR_WRAP tar x --no-same-owner ); then
			set +o pipefail
			echo "Error: tar to fill the snapshot failed." >&2
			return 255
		fi
		set +o pipefail
	else
		if ! command -v fuse-overlayfs >/dev/null; then
			echo 'Error: fuse-overlayfs is needed for directory overlays.' >&2
			return 1
		fi
		if [ -n "${excludes[*]}" ]; then
			echo 'Error: overlay does not support exclude.' >&2
			return 1
		fi

		local workdir upperdir
		workdir="$(mktemp -p "$MAIN_TMP_DIR" -d workdir.XXXXXXXXXX)"
		upperdir="$(mktemp -p "$MAIN_TMP_DIR" -d upperdir.XXXXXXXXXX)"

		OVERLAYFS_ARGS+=("-o" "lowerdir=$MAIN_TMP_DIR/oldroot/$DIRECTORY" "-o" "workdir=$workdir" "-o" "upperdir=$upperdir" "$DIRECTORY")
		if [ "$DEBUG" -gt 0 ]; then
			echo "Running: fuse-overlayfs ${OVERLAYFS_ARGS[*]}" >&2
		fi

		if ! fuse-overlayfs "${OVERLAYFS_ARGS[@]}"; then
			echo "Error: Mounting fuse-overlayfs failed." >&2
			return 255
		fi
		FINAL_FUSER_UMOUNT_DIRS+=("$DIRECTORY")
	fi
}

function handle_file {
	local FILE="$1"
	local FILE_OPTIONS="$2"

	if ! assert_valid_file "$FILE"; then
		return 1
	fi

	if [ "$DEBUG" -gt 0 ]; then
		echo "Acting on file \"$FILE\"." >&2
	fi

	TMP_FILE="$(mktemp -p "$MAIN_TMP_DIR" file.XXXXXXXXXX)"
	if ! cat "$FILE" > "$TMP_FILE"; then
		echo "Error: Copying contents of \"$FILE\" to \"$TMP_FILE\"." >&2
		return 255
	fi
	if ! MOUNT_OUT="$(mount --bind "$TMP_FILE" "$FILE" 2>&1)"; then
		echo "Error: Mounting \"$TMP_FILE\" to \"$FILE\": \"$MOUNT_OUT\"." >&2
		return 255
	fi
	FINAL_BIND_UMOUNTS+=("$FILE")
}

if [ "$1" == "--help" ]; then
	usage
	exit
fi
if [ "$#" -lt 1 ]; then
	echo "Error: Expected at least one argument!" >&2
	echo >&2

	usage >&2
	exit 1
fi

if [ ! "$1" == "--postwrap" ]; then
	SELF_PATH="$(realpath -s "$0")"
	if [ ! -f "$SELF_PATH" ]; then
		echo "Error: Could not locate own location (needed for wrapped execution)." >&2

		exit 255
	fi
	exec unshare -r -m \
		/bin/bash "$SELF_PATH" --postwrap --uid "$(id -u)" --gid "$(id -g)" "$@"
fi

# Handle the parameters added programmatically, these should always be in the very same form.
if [ ! "$2" == "--uid" ] || [ ! "$4" == "--gid" ]; then
	echo "Error: Invalid postwrap call signature." >&2

	exit 255
fi
MAP_USER="$3"
MAP_GROUP="$5"
shift 5

VERBOSE=0
DEBUG=0
FILES=()

while [ -n "$1" ]; do
	case "$1" in
		--debug)
			VERBOSE=1
			DEBUG=1
			shift
		;;
		--verbose)
			VERBOSE=1
			shift
		;;
		--)
			shift
			break
		;;
		*)
			FILES+=("$1")
			shift
		;;
	esac
done

MAIN_TMP_DIR="$(mktemp --tmpdir -d transient-file-view.XXXXXXXXXX)"
trap "clean_final" EXIT
if ! mount_oldroot; then
	exit 255
fi

for FILE in "${FILES[@]}"; do
	FILE_RAW="$(echo "$FILE" | grep -oP "^.*?$NEXT_OPTION_LOOKAHEAD")"
	FILE_OPTIONS="${FILE/"$FILE_RAW"/}"
	FILE="$(realpath "$FILE_RAW")"

	if [ -d "$FILE" ]; then
		handle_directory "$FILE" "$FILE_OPTIONS"
	elif [ -f "$FILE" ]; then
		handle_file "$FILE" "$FILE_OPTIONS"
	else
		echo "Error: Cannot act on \"$FILE_RAW\": No such file or directory" >&2
		exit 1
	fi
	exitCode=$?
	if [ "$exitCode" -gt 0 ]; then
		exit "$exitCode"
	fi
done

if ! cd "$(pwd)"; then
	echo "Error: Failed to cd back to old working directory." >&2
	exit 1
fi

UNSHARE=()
if [[ "$(unshare --help)" =~ --map-user ]]; then
	# Map us back to the original user, if unshare supports this
	UNSHARE=(unshare --map-user "$MAP_USER" --map-group "$MAP_GROUP" --)
fi

PATH="$ORIGINAL_PATH"
COMMAND=()
# No command given, start bash with a custom prompt prefix
if [ "$#" -lt 1 ]; then
	# shellcheck disable=SC2016
	COMMAND=("bash" "-l" "-i" "-c" 'PS1="(TF) $PS1" bash -i')
fi

"${UNSHARE[@]}" "$@" "${COMMAND[@]}"
